////////////////////////////////////////////////////////////////////////////////
//! \file   Interfaces.idl
//! \brief  The COM interfaces.
//! \author Chris Oldwood

import "unknwn.idl";
import "oaidl.idl";

// Forward declarations.
interface IDDEClient;
interface IDDEConversation;
interface IDDEConversations;

////////////////////////////////////////////////////////////////////////////////
//! The DDE Client interface.

[
	dual,
	object,
	nonextensible,
	uuid(AE884ACD-E365-4574-9798-5269BA54FD31),
	helpstring("The interface to the DDE Client")
]
interface IDDEClient : IDispatch
{
	//! Set the default maximum time (ms) to wait for a reply.
	[propput] HRESULT DefaultTimeout([in] long timeout);

	//! Get the default maximum time (ms) to wait for a reply.
	[propget] HRESULT DefaultTimeout([out, retval] long* timeout);

	//! Query for the collection of all running servers.
	HRESULT RunningServers([out, retval] SAFEARRAY(VARIANT)* ppServers);

	//! Query for the topics supported by the server.
	HRESULT GetServerTopics([in] BSTR bstrService, [out, retval] SAFEARRAY(VARIANT)* ppTopics);

	//! Open a conversation.
	HRESULT OpenConversation([in] BSTR bstrService, [in] BSTR bstrTopic, [out, retval] IDDEConversation** ppIDDEConv);

	//! Query for the collection of all open conversations.
	HRESULT Conversations([out, retval] IDDEConversations** ppIDDEConvs);

	//! Request an item in CF_TEXT format.
	HRESULT RequestTextItem([in] BSTR bstrService, [in] BSTR bstrTopic, [in] BSTR bstrItem, [out, retval] BSTR* pbstrValue);

	//! Poke an item provided in CF_TEXT format.
	HRESULT PokeTextItem([in] BSTR bstrService, [in] BSTR bstrTopic, [in] BSTR bstrItem, [in] BSTR bstrValue);

	//! Execute a command provided in CF_TEXT/CF_UNICODETEXT format.
	HRESULT ExecuteTextCommand([in] BSTR bstrService, [in] BSTR bstrTopic, [in] BSTR bstrCommand);
};

////////////////////////////////////////////////////////////////////////////////
//! The DDE Conversation interface.

[
	dual,
	object,
	nonextensible,
	uuid(454658F4-7C55-4604-82D6-BAA021AFBF38),
	helpstring("The interface to a DDE Conversation")
]
interface IDDEConversation : IDispatch
{
	//! Set the Service name.
	[propput] HRESULT Service([in] BSTR bstrService);

	//! Get the Service name.
	[propget] HRESULT Service([out, retval] BSTR* pbstrService);

	//! Set the Topic name.
	[propput] HRESULT Topic([in] BSTR bstrTopic);

	//! Get the Topic name.
	[propget] HRESULT Topic([out, retval] BSTR* pbstrTopic);

	//! Set the maximum time (ms) to wait for a reply.
	[propput] HRESULT Timeout([in] long timeout);

	//! Get the maximum time (ms) to wait for a reply.
	[propget] HRESULT Timeout([out, retval] long* timeout);

	//! Open the conversation.
	HRESULT Open();

	//! Query if the conversation is open.
	HRESULT IsOpen([out, retval] VARIANT_BOOL* pbIsOpen);

	//! Close the conversation.
	HRESULT Close();

	//! Request an item in CF_TEXT format.
	HRESULT RequestTextItem([in] BSTR bstrItem, [out, retval] BSTR* pbstrValue);

	//! Poke an item provided in CF_TEXT format.
	HRESULT PokeTextItem([in] BSTR bstrItem, [in] BSTR bstrValue);

	//! Execute a command provided in CF_TEXT/CF_UNICODETEXT format.
	HRESULT ExecuteTextCommand([in] BSTR bstrCommand);
};

////////////////////////////////////////////////////////////////////////////////
//! The DDE Conversations interface.

[
	dual,
	object,
	nonextensible,
	uuid(020B0E14-6DDD-4efe-BA88-41691EF80B24),
	helpstring("The interface to a collection of DDE Conversations")
]
interface IDDEConversations : IDispatch
{
	//! Get the collection count.
	[propget] HRESULT Count([out, retval] long* plCount);

	//! Get the enumerator for the collection.
	[propget, restricted, id(DISPID_NEWENUM)] HRESULT _NewEnum([out, retval] IUnknown** ppEnum);

	//! Get an item from the collection by index.
	[propget] HRESULT Item([in] long nIndex, [out, retval] IDDEConversation** ppIDDEConv);
}
